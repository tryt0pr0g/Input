.input-area {
  width: clamp(300px, 50%, 700px);
  min-height: 120px;
  border: 2px solid black;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
  border-radius: 10px;
  font-size: clamp(0.9rem, 1vw + 0.2rem, 1.2rem);
  padding: clamp(0.5rem, 1vw, 1rem);
  white-space: pre-wrap;           /* сохраняет перенос строк */
  word-break: break-word;          /* переносит длинные слова */
  font-family: monospace;          /* фиксированная ширина — решает проблему с пробелами */
  outline: none;
  color: black;
  background-color: white;
  box-sizing: border-box;
  margin-bottom: 1rem;
}

#corrTextArea {
    width: 60%;
    border: 2px solid #aaa;
    padding: 16px;
    border-radius: 10px;
    box-sizing: border-box;
    text-align: center;          /* горизонтальное выравнивание текста */
    display: flex;               /* добавлено */
    justify-content: center;         /* вертикальное выравнивание по центру */
    min-height: 100px;           /* гарантированная высота для выравнивания */
    line-height: 1.2;            /* плотнее межстрочный интервал */
    white-space: pre-wrap;       /* сохраняет переносы строк */
    font-size: clamp(0.9rem, 1vw + 0.2rem, 1.2rem);
}

.game-controls {
    display: flex;
    align-items: center; /* Aligns items vertically in the center */
    gap: 1rem; /* Adds some space between the button and the timer */
    margin-bottom: 1rem; /* Space below the controls */
}

#getText {
    width: 300px;
    /* Remove any fixed height here if present, let content or padding define it */
}

#timer {
    border: 2px solid black;
    padding: 10px;
    border-radius: 10px;
    /* Use 'flex-grow' to allow it to take available space if needed, or
       'align-self: stretch;' if its parent is flex-direction: column.
       For side-by-side, just ensure padding/line-height matches.
    */
    display: flex; /* Use flexbox to center content vertically */
    align-items: center; /* Center text vertically */
    justify-content: center; /* Center text horizontally */
    height: 100%; /* Make timer take full height of its flex parent */
}

/* To ensure both elements have the same height, the simplest way is to ensure
   their padding and line-heights are consistent or set a min-height on their
   flex parent and use align-items: stretch.
   Alternatively, you can give them a specific height if you know it,
   but a more robust solution is to let flexbox manage it.
*/
.game-controls #getText,
.game-controls #timer {
    height: 50px; /* Or whatever height you desire for both */
}

/*
#getText {
    width: 300px;
}
*/
#error-char,
.error-char {
    color: red;
}

.error-message {
    color: red;
    font-size: 0.9rem;
    margin-bottom: 10px;
    height: 1rem;
}

.hidden-field {
    display: none !important;
}

.error-chr {
    border-color: red;
}
/*
#timer {
    border: 2px solid black;
    padding: 10px;
    border-radius: 10px;
}
*/
#postNewText {
    width: 45%;
    border: 2px solid black;
}

.valid-shadow {
    box-shadow: 0 0 15px 4px rgba(0, 255, 0, 0.6);
}

.invalid-shadow {
    box-shadow: 0 0 15px 4px rgba(255, 0, 0, 0.6);
}
